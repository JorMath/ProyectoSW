@startuml
'https://plantuml.com/class-diagram


class AppCliente implements Conexion, Registrarse{
    -socketCliente: Socket
    -usuario: Usuario
    +ingresarDatos(): void
    +conexion(): void
}

class AppServidor implements Conexion, Registrarse{
    -socketServidor: ServerSocket
    -usuario: Usuario
    +conexion(): void
}

class Thread{}


interface Conexion{
    conexion(): void
}

interface Registrarse{
    ingresarDatos(): Usuario
}



class EnviarRunnable implements Runnable{
    -socket: Socket
    -Usuario: Usuario
    +run(): void
    +EnviarRunnable(socket Socket, usuario Usuario): EnviarRunnable
}

class RecibirRunnable implements Runnable{
    -socket: Socket
    +run(): void
    +RecibirRunnable(socket Socket): RecibirRunnable
}

class Usuario{
    -nombre: String
    -numTelefono: String
    -usuariosAmigos: ArrayList<Usuario>
    '-momentos: ArrayList<Usuario.ObjetosComunicacion.Momento>
    '-grupos: ArrayList<Group>
    '-registroLlamadas: ArrayList<Usuario.ObjetosComunicacion.Llamada>
    +Usuario(nombre:String , numTelefono: String): Usuario
    +agregarAmigo(usuario: Usuario): void
    +salirDeGrupo(grupo: Grupo): void
}

class Grupo{
    '-usuarios: ArrayList<Usuario.Usuario>
    -conversacion: Conversacion
    -fechaDeCreacion: Date
    +Grupo(usuario ... Usuario): Usuario
    +agregarUsuario(nuevoParticipante: Usuario): void
    +eliminarUsuario(participante: Usuario): void

}

class Conversacion{
    -fechaInicio: Date
    '-mensajes: ArrayList<Usuario.ObjetosComunicacion.Mensaje>
    '-usuarios: ArrayList<Usuario.Usuario>
    +Conversacion(emisor: Usuario, receptor: Usuario): Conversacion
    +Conversacion(usuario ... Usuario): Conversacion
    +agregarUsuario(nuevoParticipante: Usuario): void
    +eliminarUsuario(participante: Usuario): void

}
class Mensaje{
    '-emisor: Usuario.Usuario
    -contenido: Object
    -fechaInicio: Date
    +Mensaje(usuario: Usuario, contenido: Object)
    +toString(): String
    +editarMensaje(): void
    +eliminarMensaje(): void
}

class Llamada{
    -usuarios: ArrayList<Usuario>
    -fechaInicio: Date
    -fechaFinalizacion: Date
    -duracion: float
    -tipoLlamada: TipoLlamada
    -calcularDuracion(): float
    +Llamada(emisor: Usuario, receptor: Usuario, tipoLlamada: TipoLlamada): Llamada
    +agregarUsuario(nuevoParticipante: Usuario): void
    +cambiarTipoDeLlamada(tipoLlamada: TipoLlamada): void
    +iniciarLlamada(): void
    +finalizarLlamada(): void
    +prenderMicrofono(): void
    +apagarMicrofono(): void
    +prenderCamara(): void
    +apagarCamara(): void
}

class Momento{
    -fechaInicio: Date
    -contenido: Object
    -descripcion: String
    +Momento(contenido: Object, descripcion: String);
    +Momento(contenido: Object);
    +subirMomento(): void
    +eliminarMomento(): void
    +modificarMomento(): void
}

enum TipoLlamada{
    AUDIO,
    VIDEO_LLAMADA
}




Usuario "0..*"-->"+conversaciones" Conversacion
Usuario "0..*"-->"+registroDeLlamadas" Llamada
Usuario "0..*"-right->"+participaEnGrupo" Grupo
AppCliente "1"-->"usuario" Usuario
AppServidor "1"-->"usuario" Usuario



Llamada "0..*"-->"+participantes" Usuario

Conversacion "0..*"-->"+mensajes" Mensaje


AppCliente "1"-left->"+hiloRecibir" Thread
AppCliente "1"-->"+hiloEnviar" Thread

AppServidor "1"-right->"+hiloRecibir" Thread
AppServidor "1"-->"+hiloEnviar" Thread

Thread --->"+enviar" EnviarRunnable
Thread --->"+recibir" RecibirRunnable


Grupo "0..*"-->"+participantes" Usuario
Usuario "0..*"-->"+momentos" Momento
Mensaje "1"-->"+emisor" Usuario

Llamada "1"-->"+tipoLlamada" TipoLlamada
'Usuario.Usuario "0..*" -left-> "+contactos" Usuario.Usuario

Conversacion "0..*"-->"+participantes" Usuario
Usuario "0..*"-->"+usuariosAmigos" Usuario
@enduml